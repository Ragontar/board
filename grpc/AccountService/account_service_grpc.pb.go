// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: account_service.proto

package AccountService

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AccountServiceClient is the client API for AccountService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountServiceClient interface {
	UserRegistration(ctx context.Context, in *RegistrationRequest, opts ...grpc.CallOption) (*SessionResponse, error)
	UserAuthentication(ctx context.Context, in *UserAuthenticationRequest, opts ...grpc.CallOption) (*SessionResponse, error)
	RequestAuthentication(ctx context.Context, in *RequestAuthenticationRequest, opts ...grpc.CallOption) (*RequestAuthenticationResponse, error)
	LinkTelegram(ctx context.Context, in *TelegramSession, opts ...grpc.CallOption) (*TelegramConfirmationCode, error)
	LinkTelegramConfirmCode(ctx context.Context, in *TelegramConfirmationCode, opts ...grpc.CallOption) (*LinkStatus, error)
}

type accountServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountServiceClient(cc grpc.ClientConnInterface) AccountServiceClient {
	return &accountServiceClient{cc}
}

func (c *accountServiceClient) UserRegistration(ctx context.Context, in *RegistrationRequest, opts ...grpc.CallOption) (*SessionResponse, error) {
	out := new(SessionResponse)
	err := c.cc.Invoke(ctx, "/AccountService/UserRegistration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) UserAuthentication(ctx context.Context, in *UserAuthenticationRequest, opts ...grpc.CallOption) (*SessionResponse, error) {
	out := new(SessionResponse)
	err := c.cc.Invoke(ctx, "/AccountService/UserAuthentication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) RequestAuthentication(ctx context.Context, in *RequestAuthenticationRequest, opts ...grpc.CallOption) (*RequestAuthenticationResponse, error) {
	out := new(RequestAuthenticationResponse)
	err := c.cc.Invoke(ctx, "/AccountService/RequestAuthentication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) LinkTelegram(ctx context.Context, in *TelegramSession, opts ...grpc.CallOption) (*TelegramConfirmationCode, error) {
	out := new(TelegramConfirmationCode)
	err := c.cc.Invoke(ctx, "/AccountService/LinkTelegram", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) LinkTelegramConfirmCode(ctx context.Context, in *TelegramConfirmationCode, opts ...grpc.CallOption) (*LinkStatus, error) {
	out := new(LinkStatus)
	err := c.cc.Invoke(ctx, "/AccountService/LinkTelegramConfirmCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountServiceServer is the server API for AccountService service.
// All implementations must embed UnimplementedAccountServiceServer
// for forward compatibility
type AccountServiceServer interface {
	UserRegistration(context.Context, *RegistrationRequest) (*SessionResponse, error)
	UserAuthentication(context.Context, *UserAuthenticationRequest) (*SessionResponse, error)
	RequestAuthentication(context.Context, *RequestAuthenticationRequest) (*RequestAuthenticationResponse, error)
	LinkTelegram(context.Context, *TelegramSession) (*TelegramConfirmationCode, error)
	LinkTelegramConfirmCode(context.Context, *TelegramConfirmationCode) (*LinkStatus, error)
	mustEmbedUnimplementedAccountServiceServer()
}

// UnimplementedAccountServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAccountServiceServer struct {
}

func (UnimplementedAccountServiceServer) UserRegistration(context.Context, *RegistrationRequest) (*SessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserRegistration not implemented")
}
func (UnimplementedAccountServiceServer) UserAuthentication(context.Context, *UserAuthenticationRequest) (*SessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserAuthentication not implemented")
}
func (UnimplementedAccountServiceServer) RequestAuthentication(context.Context, *RequestAuthenticationRequest) (*RequestAuthenticationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestAuthentication not implemented")
}
func (UnimplementedAccountServiceServer) LinkTelegram(context.Context, *TelegramSession) (*TelegramConfirmationCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LinkTelegram not implemented")
}
func (UnimplementedAccountServiceServer) LinkTelegramConfirmCode(context.Context, *TelegramConfirmationCode) (*LinkStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LinkTelegramConfirmCode not implemented")
}
func (UnimplementedAccountServiceServer) mustEmbedUnimplementedAccountServiceServer() {}

// UnsafeAccountServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountServiceServer will
// result in compilation errors.
type UnsafeAccountServiceServer interface {
	mustEmbedUnimplementedAccountServiceServer()
}

func RegisterAccountServiceServer(s grpc.ServiceRegistrar, srv AccountServiceServer) {
	s.RegisterService(&AccountService_ServiceDesc, srv)
}

func _AccountService_UserRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).UserRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AccountService/UserRegistration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).UserRegistration(ctx, req.(*RegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_UserAuthentication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAuthenticationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).UserAuthentication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AccountService/UserAuthentication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).UserAuthentication(ctx, req.(*UserAuthenticationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_RequestAuthentication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAuthenticationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).RequestAuthentication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AccountService/RequestAuthentication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).RequestAuthentication(ctx, req.(*RequestAuthenticationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_LinkTelegram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TelegramSession)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).LinkTelegram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AccountService/LinkTelegram",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).LinkTelegram(ctx, req.(*TelegramSession))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_LinkTelegramConfirmCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TelegramConfirmationCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).LinkTelegramConfirmCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AccountService/LinkTelegramConfirmCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).LinkTelegramConfirmCode(ctx, req.(*TelegramConfirmationCode))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountService_ServiceDesc is the grpc.ServiceDesc for AccountService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AccountService",
	HandlerType: (*AccountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserRegistration",
			Handler:    _AccountService_UserRegistration_Handler,
		},
		{
			MethodName: "UserAuthentication",
			Handler:    _AccountService_UserAuthentication_Handler,
		},
		{
			MethodName: "RequestAuthentication",
			Handler:    _AccountService_RequestAuthentication_Handler,
		},
		{
			MethodName: "LinkTelegram",
			Handler:    _AccountService_LinkTelegram_Handler,
		},
		{
			MethodName: "LinkTelegramConfirmCode",
			Handler:    _AccountService_LinkTelegramConfirmCode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "account_service.proto",
}
